name: Flipkart Regression CI

on:
  workflow_dispatch:
    inputs:
      MAVEN_COMMAND:
        description: "Maven command to run"
        required: false
        default: "mvn clean test -Dsurefire.suiteXmlFiles=testng.xml"

  schedule:
    - cron: "0 2 * * *" # every day at 2AM UTC

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: write     # ‚úÖ required for gh-pages deployment
      pages: write        # ‚úÖ required for Pages
      id-token: write     # ‚úÖ required for OIDC authentication

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Chrome
        uses: browser-actions/setup-chrome@v1

      - name: Cache Maven Packages
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

      - name: Run Tests with Maven (with retry)
        run: |
          set -e
          for i in 1 2 3; do
            echo "Attempt #$i"
            ${{ github.event.inputs.MAVEN_COMMAND || 'mvn clean test' }} && break || sleep 10
          done

      - name: Generate Allure Report
        if: always()
        run: |
          sudo apt-get update && sudo apt-get install -y unzip wget
          wget -q https://github.com/allure-framework/allure2/releases/download/2.22.1/allure-2.22.1.zip -O /tmp/allure.zip
          unzip -q /tmp/allure.zip -d /tmp/
          /tmp/allure-2.22.1/bin/allure generate target/allure-results -o target/allure-report || true

      - name: Extract Allure summary stats
        if: always()
        run: |
          SUMMARY_FILE="target/allure-report/widgets/summary.json"
          if [ -f "$SUMMARY_FILE" ]; then
            PASSED=$(jq '.statistic.passed' $SUMMARY_FILE)
            FAILED=$(jq '.statistic.failed' $SUMMARY_FILE)
            SKIPPED=$(jq '.statistic.skipped' $SUMMARY_FILE)
            BROKEN=$(jq '.statistic.broken' $SUMMARY_FILE)
            TOTAL=$(jq '.statistic.total' $SUMMARY_FILE)
            DURATION=$(jq '.time.duration' $SUMMARY_FILE)

            echo "PASSED=$PASSED" >> $GITHUB_ENV
            echo "FAILED=$FAILED" >> $GITHUB_ENV
            echo "SKIPPED=$SKIPPED" >> $GITHUB_ENV
            echo "BROKEN=$BROKEN" >> $GITHUB_ENV
            echo "TOTAL_SCENARIOS=$TOTAL" >> $GITHUB_ENV
            echo "DURATION=$DURATION ms" >> $GITHUB_ENV
          else
            echo "summary.json not found!"
            echo "PASSED=0" >> $GITHUB_ENV
            echo "FAILED=0" >> $GITHUB_ENV
            echo "SKIPPED=0" >> $GITHUB_ENV
            echo "BROKEN=0" >> $GITHUB_ENV
            echo "TOTAL_SCENARIOS=0" >> $GITHUB_ENV
            echo "DURATION=N/A" >> $GITHUB_ENV
          fi

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Debug Allure summary.json
        if: always()
        run: |
          ls -R target/allure-report/widgets || echo "widgets folder not found"
          cat target/allure-report/widgets/summary.json || echo "summary.json not found"

      - name: Upload Allure Report as Artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: target/allure-report

      - name: Deploy Allure report to GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/allure-report
          destination_dir: ${{ github.run_number }}

  send-email:
    needs: test
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Generate Email Body
        id: generate-email-body
        run: |
            REPORT_URL="https://${GITHUB_REPOSITORY_OWNER}.github.io/${GITHUB_REPOSITORY#*/}/${GITHUB_RUN_NUMBER}/"
            RUN_URL="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
            
            EMAIL_BODY=$(cat <<EOF
            <!DOCTYPE html>
            <html>
            <head><meta charset="UTF-8"><title>Test Summary Report</title></head>
            <body>
              <h2>Flipkart Regression - Run #$GITHUB_RUN_NUMBER</h2>
              <p>Total: $TOTAL_SCENARIOS | ‚úÖ $PASSED | ‚ùå $FAILED | ‚è∏Ô∏è $SKIPPED | üêõ $BROKEN</p>
              <p>Env: ${ENVIRONMENT:-DEV} | Duration: $DURATION</p>
              <a href="$REPORT_URL">View Full Report</a> |
              <a href="$RUN_URL">GitHub Run</a>
            </body>
            </html>
            EOF
            )
            
            # Export to GITHUB_ENV for later steps
            echo "EMAIL_BODY<<EOF" >> $GITHUB_ENV
            echo "$EMAIL_BODY" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
        env:
            PASSED: ${{ env.PASSED }}
            FAILED: ${{ env.FAILED }}
            SKIPPED: ${{ env.SKIPPED }}
            BROKEN: ${{ env.BROKEN }}
            TOTAL_SCENARIOS: ${{ env.TOTAL_SCENARIOS }}
            DURATION: ${{ env.DURATION }}
            ENVIRONMENT: ${{ inputs.ENV }}

      - name: Send notification email
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: ${{ secrets.SMTP_HOST }}
          server_port: ${{ secrets.SMTP_PORT }}
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "Flipkart Regression - Run #${{ github.run_number }}"
          to: ${{ secrets.REPORT_TO }}
          from: ${{ secrets.SMTP_USERNAME }}
          content_type: text/html
          html_body: ${{ env.EMAIL_BODY }}

  cleanup:
    needs: [test, send-email]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Cleanup workspace
        run: |
          echo "Cleaning up workspace..."
          rm -rf ${{ github.workspace }}
